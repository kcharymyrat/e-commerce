// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Charymyrat Garryyev",
            "email": "kcharymyrat@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "\"\""
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/categories": {
            "get": {
                "description": "List categories with pagination and filters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "List categories",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Languages: en, ru, tk",
                        "name": "Accept-Language",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "name": "created_at_from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_up_to",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "created_by_ids",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "names",
                        "in": "query"
                    },
                    {
                        "maximum": 10000000,
                        "minimum": 1,
                        "type": "integer",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "parent_ids",
                        "in": "query"
                    },
                    {
                        "maxLength": 50,
                        "type": "string",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "slugs",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "sort_safe_list",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "sorts",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_up_to",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "updated_by_ids",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.PaginatedResponse-responses_CategoryPublicResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/categories/{slug}": {
            "get": {
                "description": "Get specific category details by slug",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Get category by slug",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Languages: en, ru, tk",
                        "name": "Accept-Language",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Category Slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.DetailResponse-responses_CategoryPublicResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/healthcheck": {
            "get": {
                "description": "Returns the status of the API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Healthcheck"
                ],
                "summary": "Get health check",
                "operationId": "healthcheck",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.HealthcheckResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/languages": {
            "get": {
                "description": "List languages with pagination and filters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "languages"
                ],
                "summary": "List languages",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Languages: en, ru, tk",
                        "name": "Accept-Language",
                        "in": "header"
                    },
                    {
                        "maximum": 10000000,
                        "minimum": 1,
                        "type": "integer",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.PaginatedResponse-responses_LanguagePublicResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/languages/{id}": {
            "get": {
                "description": "Get specific language details by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "languages"
                ],
                "summary": "Get language by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Languages: en, ru, tk",
                        "name": "Accept-Language",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.DetailResponse-responses_LanguagePublicResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "responses.CategoryPublicResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "format": "date-time"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "image_url": {
                    "type": "string",
                    "format": "url",
                    "example": "https://example.com/image.jpg"
                },
                "name": {
                    "type": "string",
                    "example": "Electronics"
                },
                "parent_id": {
                    "type": "string",
                    "format": "uuid"
                },
                "slug": {
                    "type": "string",
                    "format": "slug",
                    "example": "electronics"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "responses.LanguagePublicResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "types.DetailResponse-responses_CategoryPublicResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/responses.CategoryPublicResponse"
                },
                "translations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.TranslationResponse"
                    }
                }
            }
        },
        "types.DetailResponse-responses_LanguagePublicResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/responses.LanguagePublicResponse"
                },
                "translations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.TranslationResponse"
                    }
                }
            }
        },
        "types.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "types.HealthcheckResponse": {
            "type": "object",
            "properties": {
                "environment": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "types.PaginatedResponse-responses_CategoryPublicResponse": {
            "type": "object",
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/types.PaginationMetadata"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.DetailResponse-responses_CategoryPublicResponse"
                    }
                }
            }
        },
        "types.PaginatedResponse-responses_LanguagePublicResponse": {
            "type": "object",
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/types.PaginationMetadata"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.DetailResponse-responses_LanguagePublicResponse"
                    }
                }
            }
        },
        "types.PaginationMetadata": {
            "type": "object",
            "properties": {
                "current_page": {
                    "type": "integer"
                },
                "first_page": {
                    "type": "integer"
                },
                "last_page": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                },
                "total_records": {
                    "type": "integer"
                }
            }
        },
        "types.TranslationResponse": {
            "type": "object",
            "properties": {
                "entity_id": {
                    "type": "string",
                    "format": "uuid"
                },
                "field_name": {
                    "type": "string",
                    "example": "name"
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "language_code": {
                    "type": "string",
                    "example": "ru"
                },
                "table_name": {
                    "type": "string",
                    "example": "products"
                },
                "translated_field_name": {
                    "type": "string",
                    "example": "название"
                },
                "translated_value": {
                    "type": "string",
                    "example": "ноутбук"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:4000",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "E-commerce",
	Description:      "Go lang E-commerce",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
